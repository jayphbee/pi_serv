{
    "src":"../",
    "depend": ["use pi_vm::bonmgr::{BonMgr, StructMeta, FnMeta, jstype_ptr,ptr_jstype, CallResult}", "use pi_vm::adapter::{JSType, JS}", "use std::sync::Arc","use pi_vm::pi_vm_impl::{ block_reply, block_throw, push_callback}", "use worker::task::TaskType", "use atom::Atom", "use std::mem::{transmute, uninitialized}"],
    "tsdepend": [["NativeObject, call, syncCall, callbacks, asyncCall", "../vm/vm"], ["structMgr", "../../pi_utils/serialization/struct_mgr"], ["NObject","../vm/nobject"], ["* as bigInt", "../../pi_utils/math/bigint/biginteger"], ["u64ToBuffer, u128ToBuffer", "../../pi_utils/math/bigint/util"], ["StructInfo as SInfo", "../../pi_utils/serialization/sinfo"]],
    "build": [{
        "mod": "js_db",
        "sync":["iter_db", "alter", "DBIter::next", "DBIter::next_elem", "modify" , "query", "query_bin", "dump", "restore", "tab_size"],
        "ignore":["DBToMqttMonitor::Monitor::notify", "DBMonitor::Monitor::notify", "DBToGlobalMqttMonitor::Monitor::notify"]
    },{
        "mod":"util",
        "include":["read_file"]
    },{
        "mod":"js_vm",
		"async":["compile"]
    },{
        "mod":"js_env"
    },{
        "mod":"js_file",
		"async":["read_file_buffer", "read_file_string", "remove_file", "rename", "remove_dir", "write_file_buffer", "write_file_string", "write_file_buffer_binary", "read_file_buffer_binary"]
    },{
        "mod":"js_base",
        "sync":["iter_db", "DBIter::next", "sleep"],
        "async":["set_timeout"],
        "genType":{"arc_deref<T>": [["Vec<u8>"]], "arc_new<T>": [["Vec<u8>"]], "vec_from<T>":[["u8"], ["TabKV"], ["i64"], ["String"], ["Arc<Vec<u8>>"],["u32"]]}
    },{
        "mod":"js_lib",
        "include":["JSGray", "JSGray::new", "create_gray_tab", "guid_gen", "bonbuf_cmp","create_arc_vmfactory"]
    },{
        "mod": "js_httpc",
        "sync":["get<T>", "post<T>"],
        "async":["get<T>", "post<T>"],
        "genType":{"get<T>": ["Vec<u8>", "String"], "post<T>": ["Vec<u8>", "String"], "HttpClientBody<T>":["Vec<u8>", "String"], "HttpClientBody<Vec<u8>>":["Vec<u8>"], "HttpClientBody<String>": ["String"]}
    },{
        "mod": "js_net",
        "ignore":["TopicHandler::Handler::handle", "NetHandler::Handler::handle", "RequestHandler::Handler::handle", "NetEventHandler::Handler::handle", "NetMgr::add_handler", "InsecureHttpRpcRequstHandler::Handler::handle", "SecureHttpRpcRequestHandler::Handler::handle", "HttpConnect::new", "HttpConnect::set_secure_resp_handle", "HttpConnect::set_insecure_resp_handle", "HttpHeaders::new"]
    },{
        "mod": "js_async",
        "include":["AsyncRequestHandler", "AsyncRequestHandler::new"]
    },{
        "mod": "hotfix",
        "include":["compile_byte_code", "get_byte_code", "GrayTable", "GrayTable::new", "get_gray_table", "register_jsgray", "hotfix_listen", "hotfix_listen1"]
    },{
        "mod": "webshell",
        "include": ["WebShell", "WebShell::new", "WebShell::exec"]
    },{
        "mod": "js_net_rpc_client",
        "async":["RPCClient::connect", "RPCClient::request"],
        "include": ["RPCClient", "RPCClient::create", "RPCClient::connect", "RPCClient::request", "RPCClient::close", "RPCClient::status", "CloseHandler", "CloseHandler::new"]
    },{
        "mod": "ptmgr",
        "include": ["GlobalPlatMgr", "GlobalPlatMgr::get", "GlobalPlatMgr::db_mgr", "GlobalPlatMgr::projects", "GlobalPlatMgr::project_rpcs", "GlobalPlatMgr::project_db_monitors", "GlobalPlatMgr::project_mqtt_topics", "GlobalPlatMgr::project_net_services", "GlobalPlatMgr::register_name_and_hash", "GlobalPlatMgr::get_hash_from_name", "GlobalPlatMgr::PlatMgrTrait", "GlobalPlatMgr::PlatMgrTrait::register_project", "GlobalPlatMgr::PlatMgrTrait::register_db_mgr", "GlobalPlatMgr::PlatMgrTrait::register_rpc", "GlobalPlatMgr::PlatMgrTrait::register_db_monitor", "GlobalPlatMgr::PlatMgrTrait::register_mqtt_topic", "GlobalPlatMgr::PlatMgrTrait::register_mqtt_topic", "GlobalPlatMgr::PlatMgrTrait::register_net_service"]
    },{
        "mod": "binary",
        "include": ["Binary", "Binary::len", "Binary::new", "Binary::take"]
    },{
        "mod": "timer_task",
        "ignore": ["tick", "timer_task_loop"]
    }
]
}